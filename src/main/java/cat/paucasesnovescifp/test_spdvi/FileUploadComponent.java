/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package cat.paucasesnovescifp.test_spdvi;

import java.io.File;
import javax.swing.JFileChooser;
import com.azure.storage.blob.BlobClient;
import com.azure.storage.blob.BlobContainerClient;
import com.azure.storage.blob.BlobContainerClientBuilder;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.Serializable;

/**
 *
 * @author aaron
 */
public class FileUploadComponent extends javax.swing.JPanel implements Serializable {

    private String connectionString = "";
    private String containerName = "";
    private static final PropertyChangeSupport pcs = new PropertyChangeSupport(FileUploadComponent.class);
    /**
     * Creates new form FileUploadComponent
     */
    public FileUploadComponent() {
        super();
        initComponents();
    }

    public String getConnectionString() {
        return connectionString;
    }
    
    public void setConnectionString(String connectionString) {
        String oldValue = this.connectionString;
        this.connectionString = connectionString;
        pcs.firePropertyChange("connectionString", oldValue, connectionString);
    }
    
    public String getContainerName() {
        return containerName;
    }
    
    public void setContainerName(String containerName) {
        String oldValue = this.containerName;
        this.containerName = containerName;
        pcs.firePropertyChange("containerName", oldValue, containerName);
    }
    
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        pcs.addPropertyChangeListener(listener);
    }
    
    public void removePropertyChangeListener(PropertyChangeListener listener) {
        pcs.removePropertyChangeListener(listener);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jButton1 = new javax.swing.JButton();

        jTextPane1.setEditable(false);
        jScrollPane1.setViewportView(jTextPane1);

        jButton1.setText("Upload File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(90, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);
        
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            
            try {
                BlobContainerClient containerClient = new BlobContainerClientBuilder()
                    .connectionString(connectionString)
                    .containerName(containerName)
                    .buildClient();
                
                String blobName = selectedFile.getName();
                BlobClient blobClient = containerClient.getBlobClient(blobName);
                
                blobClient.uploadFromFile(selectedFile.getAbsolutePath());
                
                String uploadInfo = String.format(
                    "File uploaded: %s\nSize: %d bytes\nTime: %s",
                    blobName,
                    selectedFile.length(),
                    java.time.LocalDateTime.now().toString()
                );
                jTextPane1.setText(uploadInfo);
                
                UploadEvent event = new UploadEvent(
                    blobName,
                    selectedFile.length(),
                    java.time.LocalDateTime.now().toString()
                );
                pcs.firePropertyChange("uploadComplete", null, event);
                
            } catch (Exception ex) {
                jTextPane1.setText("Error uploading file: " + ex.getMessage());
                pcs.firePropertyChange("uploadError", null, ex.getMessage());
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    public static class UploadEvent {
        private final String fileName;
        private final long fileSize;
        private final String uploadTime;
        
        public UploadEvent(String fileName, long fileSize, String uploadTime) {
            this.fileName = fileName;
            this.fileSize = fileSize;
            this.uploadTime = uploadTime;
        }
        
        public String getFileName() { return fileName; }
        public long getFileSize() { return fileSize; }
        public String getUploadTime() { return uploadTime; }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
